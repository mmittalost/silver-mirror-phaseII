{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class SilverMirrorService {\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n    this.otp = '';\n    this.locationList$ = new BehaviorSubject([]);\n    this.serviceList$ = new BehaviorSubject([]);\n    this.getClientByEmail$ = new BehaviorSubject([]);\n    this.addNewClient$ = new BehaviorSubject([]);\n    this.loginStatus = false;\n    this.selectedLocation = '';\n    this.getLocations();\n  }\n  getLocations() {\n    this.http.get('http://localhost:50000/get_locations').subscribe(res => {\n      this.locationList$.next(res.data.locations.edges);\n      console.log(res.data);\n    });\n  }\n  createCart(id) {\n    const payload = {\n      locationID: id,\n      client_id: ''\n    };\n    this.http.post('http://localhost:50000/create_cart', payload).subscribe(res => {\n      localStorage.setItem('cartID', res.createCart.cart.id);\n      console.log(res);\n    });\n  }\n  getClientByEmail(email) {\n    const payload = {\n      emails: [email]\n    };\n    this.http.post('http://localhost:50000/get_client_by_email', payload).subscribe(res => {\n      this.getClientByEmail$.next(res);\n      console.log(\"resl\", res.data.clients.edges.length);\n      if (res.data.clients.edges.length == 1) {\n        this.otp = Math.floor(Math.random() * 1000000 + 1);\n        localStorage.setItem('otp', this.otp);\n      } else {\n        this.router.navigate(['/register']);\n      }\n    });\n  }\n  addNewClient(data) {\n    const payload = {\n      client: {\n        email: data.email,\n        firstName: data.firstName,\n        lastName: data.lastName,\n        mobilePhone: data.phone\n      }\n    };\n    console.log(\">>Pay\", payload);\n    this.http.post('http://localhost:50000/createClient', payload).subscribe(res => {\n      // this.serviceList$.next(res.data);\n      console.log(\">>\", res);\n    });\n  }\n  selectLocation(id) {\n    localStorage.setItem('selectedLocation', id);\n    this.createCart(id);\n  }\n}\nSilverMirrorService.ɵfac = function SilverMirrorService_Factory(t) {\n  return new (t || SilverMirrorService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n};\nSilverMirrorService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: SilverMirrorService,\n  factory: SilverMirrorService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["BehaviorSubject","SilverMirrorService","constructor","http","router","getLocations","get","subscribe","res","locationList$","next","data","locations","edges","console","log","createCart","id","payload","locationID","client_id","post","localStorage","setItem","cart","getClientByEmail","email","emails","getClientByEmail$","clients","length","otp","Math","floor","random","navigate","addNewClient","client","firstName","lastName","mobilePhone","phone","selectLocation","factory","providedIn"],"sourceRoot":"","sources":["C:\\wamp64\\www\\SMP2\\silver-mirror-phaseII\\silver-mirror-phaseII\\src\\app\\silver-mirror.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { BehaviorSubject, concat, forkJoin, Subject, map } from 'rxjs';\nimport { Router } from '@angular/router';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SilverMirrorService {\n  otp:any='';\n  locationList$: BehaviorSubject<any> = new BehaviorSubject([]);\n  serviceList$: BehaviorSubject<any> = new BehaviorSubject([]);\n  getClientByEmail$: BehaviorSubject<any> = new BehaviorSubject([]);\n  addNewClient$: BehaviorSubject<any> = new BehaviorSubject([]);\n  loginStatus:boolean=false;\n  selectedLocation: string='';\n  constructor(private http:HttpClient,private router:Router) {\n    this.getLocations();\n   }\n   getLocations() {\n    this.http\n      .get('http://localhost:50000/get_locations')\n      .subscribe((res: any) => {\n        this.locationList$.next(res.data.locations.edges);\n        console.log(res.data);\n      });\n  }\n\n  createCart(id:any) {\n    const payload = {\n      locationID:id,\n      client_id:''\n    }; \n    this.http\n      .post('http://localhost:50000/create_cart',payload)\n      .subscribe((res: any) => {\n        \n        localStorage.setItem('cartID',res.createCart.cart.id);\n        console.log(res);\n      });\n  }\n  getClientByEmail(email:any) {\n    const payload = {\n      emails:[email]\n    };    \n    this.http\n      .post('http://localhost:50000/get_client_by_email',payload)\n      .subscribe((res: any) => {\n        this.getClientByEmail$.next(res);\n        console.log(\"resl\",res.data.clients.edges.length);\n      if(res.data.clients.edges.length==1)\n      {\n        this.otp = Math.floor((Math.random() * 1000000) + 1);\n        localStorage.setItem('otp',this.otp);\n      }\n      else{\n        this.router.navigate(['/register']);\n      }\n      });\n  }\n\n  addNewClient(data:any) {\n    const payload = {client:{\n      email:data.email,\n      firstName:data.firstName,\n      lastName:data.lastName,\n      mobilePhone:data.phone\n    }}; \n    console.log(\">>Pay\",payload); \n    this.http\n      .post('http://localhost:50000/createClient',payload)\n      .subscribe((res: any) => {\n       // this.serviceList$.next(res.data);\n        console.log(\">>\",res);\n      });\n  }\n  selectLocation(id:any){\n    localStorage.setItem('selectedLocation',id);\n    this.createCart(id);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}